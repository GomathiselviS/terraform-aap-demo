---
- name: Create resources playbook
  module_defaults:
    group/aws:
      aws_access_key: "{{ aws_access_key | default(omit) }}"
      aws_secret_key: "{{ aws_secret_key | default(omit) }}"
      security_token: "{{ security_token | default(omit) }}"
      region: "{{ region | default(aws_region) }}"
  block:
    - name: Get vm info
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": "{{ deploy_flask_app_bastion_host_name }}"
          instance-state-name: ["running"]
      register: vm_result_info

    - name: Get vpc information
      amazon.aws.ec2_vpc_net_info:
        vpc_ids: 
          - "{{ vm_result_info.instances[0].vpc_id }}"
      register: vpc

    - amazon.aws.ec2_vpc_subnet_info:
        subnet_ids:
          - "{{ vm_result_info.instances[0].subnet_id }}"
      register: subnet

    # Public and Private subnets should be in the same availability zone
    # So that the load balancer can target workers instances
    - name: Set 'shared_az' variable
      ansible.builtin.set_fact:
        shared_az: "{{ vm_result_info.instances[0].placement.availability_zone }}"

    - name: Create private subnet for workers
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpcs[0].id }}"
        cidr: "{{ subnet_cidr[1] }}"
        az: "us-east-1a"
      register: private_subnet

    - name: Create another private subnet for RDS
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpcs[0].id }}"
        cidr: "{{ subnet_cidr[2] }}"
        az: "us-east-1b"
      register: rds_subnet

    - name: Create subnet group for RDS instance
      amazon.aws.rds_subnet_group:
        name: "{{ rds_subnet_group_name }}"
        description: subnet group for RDS instance to be hidden
        subnets:
          - "{{ rds_subnet.subnet.id }}"
          - "{{ private_subnet.subnet.id }}"
        state: present

    - name: Create internet gateway attached to the VPC
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpcs[0].id }}"
        state: present
      register: internet_gw

    - name: Create NAT gateway (allow access to internet for instances in private subnet)
      amazon.aws.ec2_vpc_nat_gateway:
        subnet_id: "{{ vm_result_info.instances[0].subnet_id }}"
        if_exist_do_not_create: true
        wait: true
        state: present
      register: nat_gw

    - name: Create Route table for internet gateway (public subnet)
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpcs[0].id }}"
        subnets:
          - "{{ vm_result_info.instances[0].subnet_id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ internet_gw.gateway_id }}"
        lookup: tag
        resource_tags:
          subnet: public
          route: internet
        state: present

    - name: Create Route table for NAT gateway (private subnet)
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpcs[0].id }}"
        subnets:
          - "{{ private_subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ nat_gw.nat_gateway_id }}"
        lookup: tag
        resource_tags:
          subnet: private
          route: nat-gateway
        state: present

    - name: Create security group for bastion
      amazon.aws.ec2_security_group:
        name: "default"
        vpc_id: "{{ vpc.vpcs[0].id }}"
        description: Security group for Bastion host
        rules:
          - cidr_ip: 0.0.0.0/0
            proto: tcp
            from_port: 22
            to_port: 22
          - cidr_ip: 0.0.0.0/0
            proto: tcp
            from_port: "{{ deploy_flask_app_listening_port }}"
            to_port: "{{ deploy_flask_app_listening_port }}"
        rules_egress:
          - cidr_ip: 0.0.0.0/0
            proto: -1
        tags: "{{ resource_tags }}"
        state: present
      register: secgroup

    - name: Create security group for RDS instance
      amazon.aws.ec2_security_group:
        name: "{{ rds_secgroup_name }}"
        vpc_id: "{{ vpc.vpcs[0].id }}"
        description: Security group to allow RDS instance port
        rules:
          - cidr_ip: 0.0.0.0/0
            proto: tcp
            from_port: "{{ rds_listening_port }}"
            to_port: "{{ rds_listening_port }}"
        tags: "{{ resource_tags }}"
        state: present
      register: rds_sg

    - name: RDS creation
      when: not "aurora" in rds_engine
      block:
        - name: Get RDS instance info
          amazon.aws.rds_instance_info:
            db_instance_identifier: "{{ rds_identifier }}"
          register: rds_result

        - name: Create RDS instance
          when: rds_result.instances | length == 0
          block:
            - name: Create RDS instance (PostGreSQL Database)
              amazon.aws.rds_instance:
                force_update_password: true
                wait: true
                allocated_storage: "{{ rds_allocated_storage_gb }}"
                backup_retention_period: 0
                db_instance_class: "{{ rds_instance_class }}"
                db_instance_identifier: "{{ rds_identifier }}"
                db_name: "{{ rds_instance_name }}"
                engine: "{{ rds_engine }}"
                engine_version: "{{ rds_engine_version }}"
                master_user_password: "{{ deploy_flask_app_rds_master_password }}"
                master_username: "{{ deploy_flask_app_rds_master_username }}"
                monitoring_interval: 0
                storage_type: standard
                skip_final_snapshot: true
                db_subnet_group_name: "{{ rds_subnet_group_name }}"
                vpc_security_group_ids:
                  - "{{ rds_sg.group_id }}"
              when: rds_snapshot_arn is not defined

        - name: Get RDS instance info
          amazon.aws.rds_instance_info:
            db_instance_identifier: "{{ rds_identifier }}"
          register: rds_result

    - name: Ensure IAM instance role exists
      amazon.aws.iam_role:
        name: "{{ ec2_iam_role_name }}"
        assume_role_policy_document: "{{ lookup('file', 'ec2-trust-policy.json') }}"
        state: present
        create_instance_profile: true
        wait: true
      register: role_output

    - name: Create a virtual machine
      amazon.aws.ec2_instance:
        name: "{{ deploy_flask_app_bastion_host_name }}"
        image_id: "ami-00868b88dcd97faed"
        instance_type: "{{ bastion_host_type }}"
        instance_role: "{{ role_output.iam_role.role_name }}"
        network:
          groups:
            - "{{ secgroup.group_id }}"
        state: running
        wait: true
      register: vm_result
